name: Deploy EC2 with Terraform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/test/qa/production)'
        required: true
        default: 'dev'

env:
  AWS_REGION: us-east-1  # Set your desired AWS region here
  TF_ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    environment: ${{ env.TF_ENVIRONMENT }}
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"  # Specify your desired Terraform version here

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="key=terraform/${{ env.TF_ENVIRONMENT }}.tfstate"

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      id: plan
      run: |
        if [ -f "${{ env.TF_ENVIRONMENT }}.tfvars" ]; then
          terraform plan -var-file=${{ env.TF_ENVIRONMENT }}.tfvars -out=tfplan
        else
          echo "No ${{ env.TF_ENVIRONMENT }}.tfvars file found. Using default variables."
          terraform plan -out=tfplan
        fi
        
        # Capture the plan status
        if [ $? -eq 0 ]; then
          echo "plan_status=success" >> $GITHUB_OUTPUT
        else
          echo "plan_status=failure" >> $GITHUB_OUTPUT
        fi
        
        # Output the plan
        terraform show -no-color tfplan > tfplan.txt

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ env.TF_ENVIRONMENT }}
        path: tfplan.txt

    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.outputs.plan_status == 'success'
      run: |
        terraform apply -auto-approve tfplan
        
        # Capture the apply status
        if [ $? -eq 0 ]; then
          echo "apply_status=success" >> $GITHUB_OUTPUT
        else
          echo "apply_status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Output
      if: steps.apply.outputs.apply_status == 'success'
      run: |
        terraform output -json > tf_output.json

    - name: Upload Terraform Output
      if: steps.apply.outputs.apply_status == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: terraform_output-${{ env.TF_ENVIRONMENT }}
        path: tf_output.json
